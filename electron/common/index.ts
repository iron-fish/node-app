/* eslint-disable @typescript-eslint/ban-ts-comment */
//@ts-nocheck
import {
  app,
  BrowserWindow,
  ipcMain,
  nativeTheme,
  shell,
  dialog,
  autoUpdater,
} from 'electron'
import './initLog'

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const WALLET_WEBPACK_ENTRY: string
declare const WALLET_PRELOAD_WEBPACK_ENTRY: string

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit()
}

let mainWindow: BrowserWindow

const createWindow = () => {
  if (!mainWindow) {
    // Create the browser window.
    mainWindow = new BrowserWindow({
      minHeight: 700,
      minWidth: 750,
      autoHideMenuBar: true,
      icon: __dirname + '/app.ico',
      title: 'Iron Fish Wallet',
      webPreferences: {
        enableRemoteModule: true,
        contextIsolation: true,
        // nodeIntegrationInWorker: true,
        preload: WALLET_PRELOAD_WEBPACK_ENTRY,
      },
    })

    mainWindow.maximize()

    if (process.env.MODE === 'dev') {
      // Open the DevTools.
      mainWindow.webContents.openDevTools()
    }

    // and load the index.html of the app.
    mainWindow.loadURL(WALLET_WEBPACK_ENTRY)

    mainWindow.webContents.on('new-window', (e, url) => {
      e.preventDefault()
      shell.openExternal(url)
    })
  } else {
    mainWindow.show()
    mainWindow.focus()
  }
}

ipcMain.handle('theme-mode-change', (e, mode: 'light' | 'dark' | 'system') => {
  nativeTheme.themeSource = mode
})

ipcMain.handle('dialog:openDirectory', async () => {
  const { canceled, filePaths } = await dialog.showOpenDialog(mainWindow, {
    properties: ['openDirectory'],
  })
  if (canceled) {
    return
  } else {
    return filePaths[0]
  }
})

if (app.isPackaged) {
  const server = 'https://your-deployment-url.com' //need update URL after selecting the update server
  const url = `${server}/update/${process.platform}/${app.getVersion()}`

  autoUpdater.setFeedURL({ url })

  // Checking for updates once an hour
  setInterval(() => {
    autoUpdater.checkForUpdates()
  }, 3600000)
}

autoUpdater.on('update-downloaded', (event, releaseNotes, releaseName) => {
  const dialogOpts = {
    type: 'info',
    buttons: ['Restart', 'Later'],
    title: 'Application Update',
    message: process.platform === 'win32' ? releaseNotes : releaseName,
    detail:
      'A new version has been downloaded. Restart the application to apply the updates.',
  }

  dialog.showMessageBox(dialogOpts).then(returnValue => {
    if (returnValue.response === 0) autoUpdater.quitAndInstall()
  })
})

autoUpdater.on('error', message => {
  // eslint-disable-next-line no-console
  console.error('There was a problem updating the application')
  // eslint-disable-next-line no-console
  console.error(message)
})

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => createWindow())

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', async () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
